<configuration>
    <!-- property 태그를 사용해 로그 출력 형식을 정의하고 있습니다.
    이 형식은 변수를 선언하여 재사용 가능하게 만드는 방식 -->
    <property name="CONSOLE_PATTERN"
              value="[%X{request_id:-startup}] [%d{yyyy-MM-dd HH:mm:ss.SSS}] %magenta([%thread]) %highlight([%-3level]) [%logger{5}] - %msg %n"/>

    <property name="ROLLING_PATTERN"
              value="[%X{request_id:-startup}] [%d{yyyy-MM-dd HH:mm:ss.SSS}] [%thread] [%-3level] [%logger{5}] - %msg %n" />
    <property name="FILE_NAME" value="D:\\logs\\application.log"/>
    <property name="LOG_NAME_PATTERN" value="./logs/application-%d{yyyy-MM-dd-HH-mm}.%i.log" />
    <property name="MAX_FILE_SIZE" value="10MB" />
    <property name="TOTAL_SIZE" value="30MB" />
    <property name="MAX_HISTORY" value="2" />

    <!-- Console appender 설정 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <Pattern>${CONSOLE_PATTERN}</Pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <appender name="ROLLING_LOG_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${ROLLING_PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <file>${FILE_NAME}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${LOG_NAME_PATTERN}</fileNamePattern>
            <maxHistory>${MAX_HISTORY}</maxHistory>
            <maxFileSize>${MAX_FILE_SIZE}</maxFileSize>
            <totalSizeCap>${TOTAL_SIZE}</totalSizeCap>
        </rollingPolicy>
    </appender>

    <!--
      Appender: 로그가 출력될 위치를 정의하는 역할을 합니다. 예를 들어, 콘솔(ConsoleAppender), 파일(FileAppender)
      encoder: Appender에 의해 정의된 출력 위치로 보낼 로그 메시지를 형식화하는 역할
      여기서 형식화란 로그 메시지가 어떻게 나타날지를 정의하는 것입니다. 로그의 날짜, 시간, 로그 레벨, 스레드 이름, 클래스 이름 등을 포함시킬 수 있습니다.
    -->

    <logger name="jdbc" level="OFF" additive="false">
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="ROLLING_LOG_FILE"/>
    </logger>
    <logger name="jdbc.sqlonly" level="DEBUG" additive="false">
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="ROLLING_LOG_FILE"/>
    </logger>
    <logger name="jdbc.sqltiming" level="OFF" additive="false">
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="ROLLING_LOG_FILE"/>
    </logger>
    <logger name="org.hibernate.dialect.MySQLDialect" level="DEBUG" additive="false">
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="ROLLING_LOG_FILE"/>
    </logger>
    <logger name="com.tripmate.account.user.controller.UserManageController" level="DEBUG" additive="false">
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="ROLLING_LOG_FILE"/>
    </logger>
    <logger name="com.example.todolist.service" level="DEBUG" additive="false">
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="ROLLING_LOG_FILE"/>
    </logger>
    <logger name="com.example.todolist.domain" level="DEBUG" additive="false">
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="ROLLING_LOG_FILE"/>
    </logger>
    <!--   루트 로거는 모든 로거에 공통적으로 적용되는 기본 설정을 제공
     INFO 이상의 로그 레벨로 설정되어 있습니다.
     즉, 루트 로거는 INFO, WARN, ERROR 레벨의 로그를 출력하게 됩니다.
     DEBUG나 TRACE 로그는 별도로 설정한 로거에서만 출력됩니다.-->
    <root level="INFO">
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="ROLLING_LOG_FILE"/>
    </root>
</configuration>